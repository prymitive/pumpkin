# custom_search - jeśli robić to co wtedy zwracać?

# Debug

# Statystyki

#  zrobić storage do wszystkich modeli, tak żeby 30 importów nie alokowało
#      30 pełnych fieldów a ino 1

# PasswordField - jak?
# b) StringField + metoda password() na modelu która działa tylko jak jest
#    field typu PasswordField w modelu i woła directory.mod_password_s(),
#    do tego kwargsy enc=(plain,md5,sha1) itd., encode2str zwróci str zakodowanego
#    przy użyciu odpowiedniej metody, sprawdzić czy nasze md5 == ldap md5

# DNField - jak zrobić?
# a) po prostu str
# b) instancja modelu - ale jakiego modelu? nie wiadomo w momencie definicji
#    modelu który ma zawierać DNField, nie ma jak tego przekazać potem
# c) custom_func generujący instancje modelu

# wyjątki zrobić

# małe i duże litery są przez pumpkin'a rozróżnianie ale ldap je olewa

# ModelField i ModelListField - przechowuje dn'y innych obiektów, zwraca
# instancje model z podanej listy, tylko co ma zwracać jak dn wskazuje na obiekt
# który nie istnieje

# rekursywny delete?

# recursywny rename?

# catchall model? _object_class_ = '*'

# wywalić affected a zamiast tego zrobić hook'i
# w hook'ach można sobie zrobić searcha na starej wartości i zmienić co trzeba
# ale nie ma teraz skąd brać starej wartości więc w _storage trzeba też trzymać
# starą wartość albo dodać _storage_org czy coś w ten deseń
